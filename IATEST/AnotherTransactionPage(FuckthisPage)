import customtkinter as ctk
from tkinter import StringVar

# Initialize the main app
class TransactionManagerApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Transaction Manager")
        self.geometry("500x300")
        
        # Current State Variables
        self.current_mode = None  # Tracks 'add', 'edit', 'delete', or None
        self.widgets = {}  # Store references to dynamically created widgets
        
        # Initialize UI
        self.create_main_buttons()
        self.output_frame = ctk.CTkFrame(self, width=500, height=200)
        self.output_frame.pack(pady=10, padx=10, fill="both", expand=True)
        
    def create_main_buttons(self):
        """Create buttons to toggle between add, edit, and delete modes."""
        button_frame = ctk.CTkFrame(self, height=50)
        button_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkButton(button_frame, text="Add", command=lambda: self.switch_mode("add")).pack(side="left", padx=10)
        ctk.CTkButton(button_frame, text="Edit", command=lambda: self.switch_mode("edit")).pack(side="left", padx=10)
        ctk.CTkButton(button_frame, text="Delete", command=lambda: self.switch_mode("delete")).pack(side="left", padx=10)
        ctk.CTkButton(button_frame, text="Clear", command=self.reset_ui).pack(side="left", padx=10)
    
    def switch_mode(self, mode):
        """Handle switching between add, edit, delete, and clearing modes."""
        if self.current_mode == mode:
            return  # If already in the desired mode, do nothing
        
        self.current_mode = mode
        self.reset_ui()  # Clear previous UI before creating new one
        
        if mode == "add":
            self.create_add_ui()
        elif mode == "edit":
            self.create_edit_ui()
        elif mode == "delete":
            self.create_delete_ui()
    
    def reset_ui(self):
        """Clear all dynamic widgets."""
        for widget in self.widgets.values():
            widget.destroy()
        self.widgets.clear()
    
    def create_add_ui(self):
        """Create UI components for Add mode."""
        self.widgets["from_entry"] = ctk.CTkEntry(self.output_frame, placeholder_text="Transaction From")
        self.widgets["from_entry"].pack(pady=5)
        
        self.widgets["to_entry"] = ctk.CTkEntry(self.output_frame, placeholder_text="Transaction To")
        self.widgets["to_entry"].pack(pady=5)
        
        self.widgets["add_button"] = ctk.CTkButton(self.output_frame, text="Add", command=self.handle_add_transaction)
        self.widgets["add_button"].pack(pady=10)
    
    def create_edit_ui(self):
        """Create UI components for Edit mode."""
        self.widgets["id_entry"] = ctk.CTkEntry(self.output_frame, placeholder_text="Transaction ID")
        self.widgets["id_entry"].pack(pady=5)
        
        self.widgets["field_combobox"] = ctk.CTkComboBox(
            self.output_frame,
            values=["Date", "Inventory ID", "Type", "Branch ID"],
        )
        self.widgets["field_combobox"].set("Select Field")
        self.widgets["field_combobox"].pack(pady=5)
        
        self.widgets["edit_button"] = ctk.CTkButton(self.output_frame, text="Edit", command=self.handle_edit_transaction)
        self.widgets["edit_button"].pack(pady=10)
    
    def create_delete_ui(self):
        """Create UI components for Delete mode."""
        self.widgets["id_entry"] = ctk.CTkEntry(self.output_frame, placeholder_text="Transaction ID")
        self.widgets["id_entry"].pack(pady=5)
        
        self.widgets["delete_button"] = ctk.CTkButton(self.output_frame, text="Delete", command=self.handle_delete_transaction)
        self.widgets["delete_button"].pack(pady=10)
    
    def handle_add_transaction(self):
        """Handle adding a transaction."""
        from_value = self.widgets["from_entry"].get()
        to_value = self.widgets["to_entry"].get()
        print(f"Adding Transaction: From - {from_value}, To - {to_value}")
    
    def handle_edit_transaction(self):
        """Handle editing a transaction."""
        transaction_id = self.widgets["id_entry"].get()
        field = self.widgets["field_combobox"].get()
        print(f"Editing Transaction ID {transaction_id}, Field - {field}")
    
    def handle_delete_transaction(self):
        """Handle deleting a transaction."""
        transaction_id = self.widgets["id_entry"].get()
        print(f"Deleting Transaction ID {transaction_id}")

# Run the app
if __name__ == "__main__":
    app = TransactionManagerApp()
    app.mainloop()
